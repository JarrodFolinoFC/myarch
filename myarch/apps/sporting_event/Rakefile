# frozen_string_literal: true

require 'rake'
require_relative '../../libs/ruby/bunny/bunny_connection_factory'
require_relative '../../libs/ruby/bunny/event_listener'
require_relative '../../libs/ruby/bunny/event_publisher'
require_relative '../../libs/ruby/bunny/queue_manager'
require_relative '../../libs/ruby/active_model/active_model_helper'

require_relative 'db/db_connection'
require_relative 'models/sporting_event'
require_relative 'lib/csv_reader'

desc 'Clean Sporting Event'
task clean: 'db:connect' do
  Heart::Core::QueueManager.new.purge_all(%w[sporting_event_created sporting_event_created])
  SportingEvent.delete_all
end

namespace :db do
  desc 'DB Connect'
  task :connect do
    DbConnection.connect!
  end

  desc 'Migrate DB'
  task migrate: 'db:connect' do
    require_relative 'db/migrate/migration_one'
  end
end

desc 'Sporting Event Summary'
task summary: 'db:connect' do
  puts '' "
  SportingEvent
  count #{SportingEvent.count}
  #{SportingEvent.last&.attributes}
  " ''
end

namespace :run do
  desc 'Run Sporting Event REST Server'
  task :server do
    ruby "#{__dir__}/api/rest_server.rb"
  end

  desc 'Run Create Sporting Event Listener'
  task create_listener: 'db:connect' do
    Heart::Core::EventListener.new('sporting_event_create').listen do |payload|
      sporting_events = Heart::Core::ActiveModelHelper.build_all(SportingEvent, JSON.parse(payload))
      sporting_events.map(&:save!)
    end
  end

  desc 'Run Sporting Event Created Listener'
  task created_listener: 'db:connect' do
    Heart::Core::EventListener.new('sporting_event_created').listen { |payload| puts payload }
  end
end

desc 'Publish Single Sporting Event'
task :publish_all do
  Heart::Core::EventPublisher.fetch_instance('sporting_event_create').send { CsvReader.parse_csv('data.csv') }
end

desc 'Publish Single Sporting Event'
task :publish, [:internal_id] do |t, args|
  internal_id = args[:internal_id]
  data = JSON.parse(CsvReader.parse_csv('data.csv')).select { |obj| obj['internal_id'] == internal_id }.to_json
  Heart::Core::EventPublisher.fetch_instance('sporting_event_create').send { data }
end
