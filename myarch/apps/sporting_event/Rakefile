# frozen_string_literal: true

require 'rake'
require_relative '../../lib/ruby/bunny_connection_factory'
require_relative '../../lib/ruby/event_listener'
require_relative '../../lib/ruby/event_publisher'

require_relative 'db/db_connection'
require_relative 'models/sporting_event'
require_relative 'lib/csv_reader'

namespace :db do
  desc 'DB Connect'
  task :connect do
    DbConnection.connect!
  end

  desc 'Clean Sporting Event'
  task clean: 'db:connect' do
    SportingEvent.delete_all
  end

  desc 'Migrate DB'
  task migrate: 'db:connect' do
    require_relative 'db/migrate/migration_one'
  end
end

desc 'Sporting Event Summary'
task summary: 'db:connect' do
  puts '' "
  SportingEvent
  count #{SportingEvent.count}
  #{SportingEvent.last.inspect}
  " ''
end

namespace :run do
  desc 'Run Create Sporting Event Listener'
  task create_listener: 'db:connect' do
    EventListener.new('sporting_event_create').listen do |payload|
      sporting_events = SportingEvent.build_all(JSON.parse(payload))
      sporting_events.map(&:save!)
    end
  end

  desc 'Run Sporting Event Created Listener'
  task created_listener: 'db:connect' do
    EventListener.new('sporting_event_created').listen do |payload|
      puts payload
    end
  end
end

desc 'Publish Single Sporting Event'
task :publish_all do
  EventPublisher
    .new('test_exchange', 'sporting_event_create', 'key1')
    .send do
    CsvReader.parse_csv('data.csv')
  end
end

desc 'Publish Single Sporting Event'
task :publish, [:internal_id] do |t, args|
  internal_id = args[:internal_id]
  data = JSON.parse(CsvReader.parse_csv('data.csv')).select { |obj| obj['internal_id'] == internal_id }.to_json
  EventPublisher
    .new('test_exchange', 'sporting_event_create', 'key1')
    .send do
    data
  end
end
